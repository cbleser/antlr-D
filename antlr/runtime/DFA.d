/*
  [The "BSD licence"]
  Copyright (c) 2005-2008 Terence Parr
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
  3. The name of the author may not be used to endorse or promote products
  derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
module antlr.runtime.DFA;


import antlr.runtime.BaseRecognizer;
import antlr.runtime.IntStream;
import antlr.runtime.NoViableAltException;
import antlr.runtime.Token;

import tango.stdc.stdio;
import tango.io.Stdout;

/** A DFA implemented as a set of transition tables.
 *
 *  Any state that has a semantic predicate edge is special; those states
 *  are generated with if-then-else structures in a specialStateTransition()
 *  which is generated by cyclicDFA template.
 *
 *  There are at most 32767 states (16-bit signed short).
 *  Could get away with byte sometimes but would have to generate different
 *  types and the simulation code too.  For a point of reference, the Java
 *  lexer's Tokens rule DFA has 326 states roughly.
 */
public class DFA(char_t) {
    alias BaseRecognizer!(char_t) BaseRecognizerT;
    alias NoViableAltException!(char_t) NoViableAltExceptionT;
    alias Token!(char_t) TokenT;
    protected short[] eot;
    protected short[] eof;
    protected wchar[] min;
    protected wchar[] max;
    protected short[] accept;
    protected short[] special;
    protected short[][] transition;

    protected int decisionNumber;

    /** Which recognizer encloses this DFA?  Needed to check backtracking */
    protected BaseRecognizerT recognizer;

    //  static bool debug;
    // = false;

    /** From the input stream, predict what alternative will succeed
     *  using this DFA (representing the covering regular approximation
     *  to the underlying CFL).  Return an alternative number 1..n.  Throw
     *  an exception upon error.
     */
    public int predict(IntStream input)
        {
            debug(DFA)  {
                Stderr.format("Enter DFA.predict for decision {}",decisionNumber).newline;
            }
            int mark = input.mark(); // remember where decision started in input
            int s = 0; // we always start at s0
            try {
                while ( true ) {
                    debug Stderr.format("DFA {} state {} LA(1)={}({}), index={}",
                        decisionNumber,s,cast(char)input.LA(1),input.LA(1),input.index()).newline;
                    int specialState = special[s];
                    if ( specialState>=0 ) {
                        debug {
                            Stderr.format("DFA {} state {} is special state {}",
                                decisionNumber,s,specialState).newline;
                        }
                        s = specialStateTransition(specialState,input);
                        debug {
                            Stderr.format("DFA {} returns from special state {} to {}",
                                decisionNumber,specialState,s).newline;
                        }
                        if ( s==-1 ) {
                            noViableAlt(s,input);
                            return 0;
                        }
                        input.consume();
                        continue;
                    }
                    if ( accept[s] >= 1 ) {
                        debug Stderr.format("accept; predict {} from state {}",accept[s],s).newline;
                        return accept[s];
                    }
                    // look for a normal char transition
                    wchar c = cast(wchar)input.LA(1); // -1 == \uFFFF, all tokens fit in 65000 space
                    if (c>=min[s] && c<=max[s]) {
                        short snext = transition[s][c-min[s]]; // move to next state
                        if ( snext < 0 ) {
                            // was in range but not a normal transition
                            // must check EOT, which is like the else clause.
                            // eot[s]>=0 indicates that an EOT edge goes to another
                            // state.
                            if ( eot[s]>=0 ) {  // EOT Transition to accept state?
                                debug(DFA) Stderr.format("EOT transition").newline;
                                s = eot[s];
                                input.consume();
                                // TODO: I had this as return accept[eot[s]]
                                // which assumed here that the EOT edge always
                                // went to an accept...faster to do this, but
                                // what about predicated edges coming from EOT
                                // target?
                                continue;
                            }
                            noViableAlt(s,input);
                            return 0;
                        }
                        s = snext;
                        input.consume();
                        continue;
                    }
                    if ( eot[s]>=0 ) {  // EOT Transition?
                        debug(DFA) Stderr("EOT transition").newline;
                        s = eot[s];
                        input.consume();
                        continue;
                    }
                    int x=TokenT.EOF;
                    if ( c==cast(wchar)(TokenT.EOF) && eof[s]>=0 ) {  // EOF Transition to accept state?
                        debug(DFA) Stderr.format("accept via EOF; predict {} from {}",
                            accept[eof[s]],eof[s]).newline;
                        return accept[eof[s]];
                    }
                    // not in range and not EOF/EOT, must be invalid symbol
                    debug(DFA) {
                        Stderr.format("min[{}]={}",s,min[s]).newline;
                        Stderr.format("max[{}]={}",s,max[s]).newline;
                        Stderr.format("eot[{}]={}",s,eot[s]).newline;
                        Stderr.format("eof[{}]=",eof[s]);
                        for (int p=0; p<transition[s].length; p++) {
                            Stderr(transition[s][p])(" ");
                        }
                        Stderr.newline;
                    }
                    noViableAlt(s,input);
                    return 0;
                }
            }
            finally {
                input.rewind(mark);
            }
        }

    protected void noViableAlt(int s, IntStream input)
        {
            if (recognizer.state.backtracking>0) {
                recognizer.state.failed=true;
                return;
            }
            NoViableAltExceptionT nvae =
                new NoViableAltExceptionT(getDescription(),
                    decisionNumber,
                    s,
                    input);
            error(nvae);
            throw nvae;
        }

    /** A hook for debugging interface */
    protected void error(NoViableAltExceptionT nvae) { ; }

    public int specialStateTransition(int s, IntStream input)
        {
            return -1;
        }

    public immutable(char_t)[] getDescription() {
        return "n/a";
    }

    /** Given a String that has a run-length-encoding of some unsigned shorts
     *  like "\1\2\3\9", convert to short[] {2,9,9,9}.
     */
    public static short[] unpackEncodedString(const(wchar)[] encodedString) {
        // walk first to find how big it is.
        size_t size = 0;
        //	Stdout.formatln("econdedString.length={}",encodedString.length);
        auto pack=new short[encodedString.length];
        size_t i=0;
        // Fold Uft into words
        foreach(c;encodedString) {
            // Stdout.format("0x{:X4} ",cast(short)c);
            if (c=='\u8000') {
                pack[i]=cast(short)0x8000;
            } else {
                pack[i++]|=cast(short)c;
            }
        }
        //	Stdout.nl;
        pack.length=i;
        //	Stdout.formatln("i={}",i);
        // Calculate the size of unpacked array
        foreach(j,p;pack) {
            if ((j % 2)==0) {
                size+=cast(ushort)p;
            }
            // Stdout.format("0x{:X4} ",p);
        }
        //	Stdout("to->").nl;
        short[] data = new short[size];
        int di = 0;
        for (i=0; i<pack.length; i+=2) {
            // Stdout(" ",i);
            ushort n=cast(ushort)pack[i];
            // if (encodedString[i]=='\u8000') {
            // 	n=0x8000;
            // 	//i++;
            // }
            // n |= cast(ushort)encodedString[i++];
            short v=pack[i+1];
            // if (encodedString[i]=='\u8000') {
            // 	v=cast(short)encodedString[i]|cast(short)encodedString[++i];
            // 	//i++;
            // } else {
            // 	v = cast(short)encodedString[i];
            // }

            // Duplicate v n times to data
            for (int j=1; j<=n; j++) {
                data[di++] = v;
                //	Stdout.format("0x{:X4} ",v);

            }
            //  Stdout.nl;
        }
        //	Stdout.formatln("size={} di={}",size,di);
        //	Stdout.newline;
        return data;
    }

    unittest {
        //	Stdout("########### DFA UINTTEST ###########").nl;
        assert(unpackEncodedString("\1\2\3\11"w)==cast(short[])[2,9,9,9]);
        assert(unpackEncodedString("\2\3\1\u8000\u1234\3\11"w)==
            cast(short[])[3,3,0x9234,9,9,9]);

        assert(unpackEncodedString("\2\3\1\u8000\u1234\3\11\2\u8000\u2432"w)==
            cast(short[])[3,3,0x9234,9,9,9,0xA432,0xA432]);
        //	assert(
        {
            auto pack=unpackEncodedString("\u0002\u4321\u8000\u0005\u1234\u0004\u7373"w);
            short[0x0002+(0x8000|0x0005)+0x0004] check;
            ushort i;
            for(int n=0;n<0x0002;n++) {
                check[i++]=0x4321;
            }
            for(int n=0;n<(0x8000|0x0005);n++) {
                check[i++]=0x1234;
            }
            for(int n=0;n<(0x0004);n++) {
                check[i++]=0x7373;
            }
            assert(pack==check);
        }
        // "\u0021\u0004\u0001\u0002\u0001\u8000\u7fff\u0001\u0004\u0001"w ~
        //  "\u8000\u7fff\u0017\u0004\u0001\u8000\u7fff\u001f\u0004\u0001"w ~
        // "\u0003\u8000\u7fa3\u0004"w);//==
        //		cast(short[])[0x,3,0x9234,9,9,9,0xA432,0xA432]);
        // foreach(i,p;pack) {
        //   if (i>0) Stdout(", ");
        //   Stdout
        // }
        //	Stdout("-- unittest end --").nl;
    }

    public static wchar[] unpackEncodedStringToUnsignedChars(const(wchar)[] encodedString) {

        auto tmp=unpackEncodedString(encodedString);
        // 	  Stdout.newline;
        // 	  Stdout(tmp).newline;
        //   auto tmp2=cast(wchar[])tmp;
        //	  Stdout.newline;

        //	  Stdout(tmp2).newline;

        return cast(wchar[])unpackEncodedString(encodedString);
    }


    /*
      public int specialTransition(int state, int symbol) {
      return 0;
      }
    */

}
